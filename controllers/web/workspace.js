const { google } = require("googleapis");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const db = require("../../models");
const Attachment = db.attachment;
const User = db.User;
const nodemailer = require("nodemailer");
const CLIENT_ID =
  "359010113154-damlb8f8t6lrr7sjf61vbts4lq60n99v.apps.googleusercontent.com";
const CLIENT_SECRET = "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";
const REDIRECT_URI = "https://developers.google.com/oauthplayground";
const REFRESH_TOKEN =
  "1//04EN4Zc0CkkdsCgYIARAAGAQSNwF-L9Ir5l8CxLEgy1xb86M5TbzjKRfXuOf_BwInwQJh2YMSDKhJJzhh0GkFqYHwn8VvvsC7luM";

const oAuth2Client = new google.auth.OAuth2(
  CLIENT_ID,
  CLIENT_SECRET,
  REDIRECT_URI
);
// set refresh token
oAuth2Client.setCredentials({ refresh_token: REFRESH_TOKEN });

// get access token
const accessToken = oAuth2Client.getAccessToken();

// Initialize the Admin SDK Directory API
const admin = google.admin({ version: "directory_v1", auth: oAuth2Client });

//

// create a new user in google workspace
exports.googleWorkspaceCreateUser = async (req, res) => {
  try {
    // let user = new User({
    //   ...req.body,
    // });
    // // if user has uploaded any file
    // let attachment_name = req.body.attachment_name;
    // // when req.file name is profilePic
    // if (
    //   req.files &&
    //   req.files.length > 0 &&
    //   req.files[0].fieldname === "profilePic"
    // ) {
    //   user.profilePic = req.files[0].path;
    // }

    // if (
    //   req.files &&
    //   req.files.length > 0 &&
    //   req.files[0].fieldname !== "profilePic"
    // ) {
    //   // loop through req.files and create an array of objects
    //   let user_media = req.files.map((file, index) => {
    //     return {
    //       imgPath: file.path,
    //       name: attachment_name[index],
    //     };
    //   });
    //   // insert many user_media
    //   user_media = await Attachment.bulkCreate(user_media);
    //   // get ids of user_media
    //   user_media = user_media.map((media) => media.id);
    //   // set user_media to user
    //   user.attachment = user_media;
    // }
    // // hash password using jwt
    // const salt = await bcrypt.genSalt(10);
    // user.password = await bcrypt.hash(user.password, salt);
    // // generate unique token for email verification using uuid
    // // const token = uuid();
    // // user.emailVerificationToken = token;
    // // email verification token expiry time is 1 minutes
    // // user.emailVerificationTokenExpiry = EMAIL_TOKEN_EXPIRY;

    // // send email verification link
    // // const transporter = nodemailer.createTransport({
    // //   service: "gmail",
    // //   auth: {
    // //     user: process.env.EMAIL,
    // //     pass: process.env.PASSWORD,
    // //   },
    // // });
    // // const mailOptions = {
    // //   from: process.env.EMAIL,
    // //   to: user.email,
    // //   subject: "Email Verification",
    // //   html: `<h1>Click the link below to verify your email</h1>
    // //   <a href="${process.env.CLIENT_URL}/api/web/auth/verify-email?token=${token}">Verify Email</a>`,
    // // };
    // // transporter.sendMail(mailOptions, (err, info) => {
    // //   if (err) {
    // //     console.log("mail error ===>", err);
    // //   } else {
    // //     console.log("Email sent: " + info.response);
    // //   }
    // // });
    // //  create a new column in user table called details

    // // alter table and add a new column called details
    // user.emailVerified = 1;
    // user = await user.save();
    // if (!user) {
    //   return res.status(500).send({ message: "User can not be created!" });
    // }

    // creating account of user in google workspace
    let data = await admin.users.insert({
      requestBody: {
        name: {
          givenName: "new user",
          familyName: "dsd",
        },
        suspended: false,
        primaryEmail: "gentleatidf@atifhussain.me",
        // password automatically generated by google
        password: "Atif@123",
        changePasswordAtNextLogin: false,
        orgUnitPath: "/",
        agreedToTerms: true,

        // role of user
      },
    });

    res.status(200).send(data);
  } catch (error) {
    console.log(error);
    res.status(400).json(error);
  }
};
